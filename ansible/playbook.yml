---
- hosts: vb

  vars:
    server_name: mootube.l
    symfony_root_dir: /var/www/project
    symfony_web_dir: "{{ symfony_root_dir }}/web"
    symfony_var_dir: "{{ symfony_root_dir }}/var"
    symfony_console_path: "{{ symfony_root_dir }}/bin/console"
      
  tasks:
    - ping: ~
    
    - name: Upgrade API Package Manager repositories cache
      become: true
      apt:
        update_cache: yes
        
    - name: Upgrade installed packages
      become: true
      apt:
        upgrade: safe
      
    - name: Install low-level utilities
      become: true
      apt: 
        name: "{{ item }}"
      with_items:
        - zip
        - unzip
      
    - name: Install cowsay ~ it's probably important 
      apt:
        name: cowsay
      become: true 
      
    - name: Install Git VCS
      become: true
      apt:
        name: git
        state: latest
        
    - name: Install Nginx web server
      become: true
      apt:
        name: nginx
        state: latest
      notify: Restart Nginx
  
    - name: Install MySQL DB Server
      become: true
      apt:
        name: mysql-server
        state: latest
        
    - name: Add PHP 7 PPA repository
      become: true
      apt_repository: 
        repo: 'ppa:ondrej/php'
      
    - name: Install PHP packages
      become: true
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - php7.1-cli
        - php7.1-curl
        - php7.1-fpm
        - php7.1-intl
        - php7.1-mysql
        - php7.1-xml
      notify: Restart PHP-FPM
        
    - name: Set date.timezone for CLI
      become: true
      lineinfile: 
        dest: /etc/php/7.1/cli/php.ini
        regexp: "date.timezone ="
        line: "date.timezone = UTC"
        
    - name: Set date.timezone for FPM
      become: true
      lineinfile: 
        dest: /etc/php/7.1/fpm/php.ini
        regexp: "date.timezone = "
        line: "date.timezone = UTC"
      notify: Restart PHP-FPM
        
    - name: Create project directory and set its permissions
      become: true
      file:
        path: "{{ symfony_root_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes
      tags:
        - deploy
        
    - name: Checkout Git repository
      git:
        repo: https://github.com/knpuniversity/ansible.git
        dest: "{{ symfony_root_dir }}"
        force: yes
      tags:
        - deploy
           
    - name: Download Composer
      script: scripts/install_composer.sh
      tags:
        - deploy
      
    - name: Move Composer globally
      become: true
      command: "mv composer.phar /usr/local/bin/composer"
      tags:
        - deploy
      
    - name: Set Permissions on Composer
      become: true
      file:
        path: /usr/local/bin/composer
        mode: "a+x"
      tags:
        - deploy
        
    - name: Install Composer's dependencies
      composer:
        working_dir: "{{ symfony_root_dir }}"
        no-dev: no
      tags:
        - deploy
        
    - name: Add Symfony config template to the Nginx available sites
      become: true
      template:
        src: templates/symfony.conf
        dest: "/etc/nginx/sites-available/{{ server_name }}.conf"
      notify: Restart Nginx
        
    - name: Enable Symfony config template from Nginx available sites
      become: true
      file:
        src: "/etc/nginx/sites-available/{{ server_name }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ server_name }}.conf"
        state: link
      notify: Restart Nginx
        
    - name: Add enabled Nginx site /etc/hosts
      become: true
      lineinfile:
        dest: /etc/hosts
        regexp: "{{ server_name }}"
        line: "127.0.0.1 {{ server_name }}"
        
    - name: Fix var directory permissions
      file:
        path: "{{ symfony_var_dir }}"
        state: directory
        mode: 0777
        recurse: yes
      changed_when: false
      tags:
        - permissions
        - deploy
        
    # Symfony console commands
    - name: Create DB if not exists
      command: '{{ symfony_console_path }} doctrine:database:create --if-not-exists'
      register: db_create_result
      changed_when: "not {{ db_create_result.stdout|search('already exists. Skipped.') }}"
      tags:
        - deploy
        
      
    - name: Execute migrations
      command: '{{ symfony_console_path }} doctrine:migrations:migrate --no-interaction'
      register: db_migrations_result
      changed_when: "not db_migrations_result.stdout|search('No migrations to execute')"
      tags:
        - deploy
      
    - name: Load data fixtures
      command: '{{ symfony_console_path }} hautelook_alice:doctrine:fixtures:load --no-interaction'
      changed_when: false
      tags:
        - deploy
        
    - name: Clear cache
      command: '{{ symfony_console_path }} cache:clear --env=prod'
      
  handlers:
    - name: Restart Nginx
      become: true
      service:
        name: nginx
        state: restarted
        
    - name: Restart PHP-FPM
      become: true
      service:
        name: php7.1-fpm
        state: restarted
  
          